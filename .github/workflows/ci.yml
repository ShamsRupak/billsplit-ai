name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run linter
        working-directory: ./backend
        run: npm run lint
      
      - name: Run tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/billsplit-test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
        run: npm test
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          directory: ./backend/coverage
          flags: backend

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linter
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run tests
        working-directory: ./frontend
        run: npm test
      
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

  # Mobile Tests
  mobile-test:
    name: Mobile Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
      
      - name: Install dependencies
        working-directory: ./mobile
        run: flutter pub get
      
      - name: Run tests
        working-directory: ./mobile
        run: flutter test
      
      - name: Build APK
        working-directory: ./mobile
        run: flutter build apk --debug
      
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: mobile/build/app/outputs/flutter-apk/app-debug.apk

  # E2E Tests
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Start services
        run: docker-compose up -d mongodb redis
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Start backend
        working-directory: ./backend
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/billsplit-test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
        run: |
          npm run build
          npm start &
          sleep 10
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run E2E tests
        working-directory: ./frontend
        env:
          VITE_API_URL: http://localhost:5000/api
        run: npm run test:e2e
      
      - name: Upload E2E test videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-videos
          path: frontend/cypress/videos/

  # Security Scan - Currently disabled
  # security-scan:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: 'fs'
  #         scan-ref: '.'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #     
  #     - name: Upload Trivy scan results
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: 'trivy-results.sarif'
